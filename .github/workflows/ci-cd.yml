name: CI/CD Pipeline

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]

env:
  USER_SERVICE_IMAGE: hammoudihayfa/user-service:latest
  MAINTENANCE_SERVICE_IMAGE: hammoudihayfa/maintenance-service:latest
  EUREKA_SERVICE_IMAGE: hammoudihayfa/eureka-service:latest
  EMAIL_SERVICE_IMAGE: hammoudihayfa/email-service:latest
  APIGATEWAY_SERVICE_IMAGE: hammoudihayfa/apigateway-service:latest
  OCR_SERVICE_IMAGE: hammoudihayfa/ocr_service:latest
  LOGICIEL_SERVICE_IMAGE: hammoudihayfa/logiciel-service:latest
  EQUIPEMENT_SERVICE_IMAGE: hammoudihayfa/equipement-service:latest
  AGENT_SERVICE_IMAGE: hammoudihayfa/agent-service:latest

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0 # Nécessaire pour l'analyse SonarQube de l'historique Git

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Build & Test Microservices
      run: |
        SERVICES="user-service maintenance-service eurekaMs email-service apiGateway ocr_service logiciel-service equipement-service agent-service"
        for SERVICE in $SERVICES; do
          echo "Building $SERVICE..."
          cd $SERVICE
          chmod +x mvnw
          ./mvnw clean install -DskipTests
          ./mvnw test
          cd ..
        done

    # --- Section SonarQube optimisée ---
    # Utilisez cette seule étape pour SonarQube.
    # L'action `sonarqube-scan-action` doit être capable de gérer les projets Maven automatiquement.
    - name: SonarQube Analysis
      uses: SonarSource/sonarqube-scan-action@v5.0.0 # Utilisez la version recommandée
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Fourni automatiquement par GitHub
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}    # Votre token SonarQube créé et stocké en secret
      with:
        # Ici, vous configurez l'action. Elle va chercher les fichiers pom.xml
        # et exécuter l'analyse. Pour des projets multi-modules comme les microservices,
        # il est souvent préférable de la lancer à la racine du dépôt si un pom.xml parent existe.
        # Si chaque service est un projet SonarQube distinct, vous devrez boucler.
        # Pour cet exemple, je vais simplifier en supposant un projet SonarQube "global" ou une analyse par défaut.
        args: >
          -Dsonar.projectKey=mon-mono-repo-sonarqube-project # Remplacez par la clé de votre projet SonarQube global ou principal
          -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} # Assurez-vous d'avoir ce secret configuré !
          -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} # Configurez ce secret si vous utilisez une organisation
          # Vous pouvez ajouter d'autres propriétés comme sonar.sources, sonar.java.binaries, etc., si l'auto-détection ne fonctionne pas
          # -Dsonar.sources=./src
          # -Dsonar.java.binaries=./target/classes

    # Si vous devez absolument analyser chaque microservice comme un projet SonarQube distinct,
    # vous devrez adapter l'action ou revenir à l'approche `mvnw sonar:sonar` par boucle,
    # mais en supprimant l'action `sonarcloud-github-action` du dessus.
    # Voici comment le faire avec la boucle `mvnw sonar:sonar` (si `sonarqube-scan-action` ne convient pas pour votre cas multi-projets)
    # Dans ce cas, REMPLACEZ l'étape "SonarQube Analysis" ci-dessus par celle-ci :
    #- name: SonarQube Analysis for Microservices
    #  env:
    #    SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #  run: |
    #    SERVICES="apiGateway email-service eurekaMs maintenance-service user-service logiciel-service agent-service equipement-service"
    #    for SERVICE in $SERVICES; do
    #      echo "Running SonarQube analysis for $SERVICE"
    #      cd $SERVICE
    #      ./mvnw sonar:sonar \
    #        -Dsonar.projectKey=$SERVICE \
    #        -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
    #        -Dsonar.login=$SONAR_TOKEN \
    #        -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
    #      cd ..
    #    done
    # --- Fin de la section SonarQube optimisée ---

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build & Push Docker Images
      run: |
        declare -A IMAGES=(
          [user-service]=$USER_SERVICE_IMAGE
          [maintenance-service]=$MAINTENANCE_SERVICE_IMAGE
          [eurekaMs]=$EUREKA_SERVICE_IMAGE
          [email-service]=$EMAIL_SERVICE_IMAGE
          [apiGateway]=$APIGATEWAY_SERVICE_IMAGE
          [ocr_service]=$OCR_SERVICE_IMAGE
          [logiciel-service]=$LOGICIEL_SERVICE_IMAGE
          [equipement-service]=$EQUIPEMENT_SERVICE_IMAGE
          [agent-service]=$AGENT_SERVICE_IMAGE
        )
        for SERVICE in "${!IMAGES[@]}"; do
          IMAGE=${IMAGES[$SERVICE]}
          echo "Building Docker image for $SERVICE -> $IMAGE"
          docker build -t $IMAGE $SERVICE
          docker push $IMAGE
        done

    - name: Deploy with Docker Compose
      run: |
        docker-compose down --volumes --remove-orphans || true
        docker-compose up -d --build
        docker-compose ps
