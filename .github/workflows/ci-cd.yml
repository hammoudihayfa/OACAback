name: CI/CD Pipeline

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]

env:
  USER_SERVICE_IMAGE: hammoudihayfa/user-service:latest
  MAINTENANCE_SERVICE_IMAGE: hammoudihayfa/maintenance-service:latest
  EUREKA_SERVICE_IMAGE: hammoudihayfa/eureka-service:latest
  EMAIL_SERVICE_IMAGE: hammoudihayfa/email-service:latest
  APIGATEWAY_SERVICE_IMAGE: hammoudihayfa/apigateway-service:latest
  OCR_SERVICE_IMAGE: hammoudihayfa/ocr_service:latest
  LOGICIEL_SERVICE_IMAGE: hammoudihayfa/logiciel-service:latest
  EQUIPEMENT_SERVICE_IMAGE: hammoudihayfa/equipement-service:latest
  AGENT_SERVICE_IMAGE: hammoudihayfa/agent-service:latest

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      # Ajoutez cette ligne pour permettre l'analyse de l'historique Git par SonarQube
      with:
        fetch-depth: 0 

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Build & Test Microservices
      run: |
        SERVICES="user-service maintenance-service eurekaMs email-service apiGateway ocr_service logiciel-service equipement-service agent-service"
        for SERVICE in $SERVICES; do
          echo "Building $SERVICE..."
          cd $SERVICE
          chmod +x mvnw
          ./mvnw clean install -DskipTests
          ./mvnw test
          cd ..
        done

    # --- Section modifiée pour SonarQube ---
    - name: SonarQube Analysis
      uses: SonarSource/sonarcloud-github-action@master # Ou @v2 si vous utilisez SonarCloud
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Fourni automatiquement par GitHub
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        # Indique le chemin vers le fichier pom.xml de chaque service.
        # Vous devrez exécuter l'action SonarCloud pour chaque service.
        projectBaseDir: . # Le répertoire de base du projet (le répertoire où se trouve le pom.xml principal si vous avez un projet multi-modules)
        # Si vous avez un projet multi-modules et que vous voulez analyser chaque module séparément, vous pouvez faire ceci:
        # SonarCloud s'attend à être exécuté au niveau du projet parent pour un projet multi-modules.
        # Si vous analysez chaque service comme un projet SonarQube distinct, vous devrez répéter cette étape pour chaque service.
        # C'est plus propre de le faire au niveau du projet parent si tous les services font partie du même projet SonarQube.
        # Pour une analyse par service, vous devriez appeler l'action dans une boucle ou pour chaque service.

        # Voici un exemple si vous voulez analyser chaque service séparément:
        # Assurez-vous que chaque service est un projet SonarQube distinct configuré sur votre serveur SonarQube.
    - name: SonarQube Analysis for Microservices
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Nécessaire pour la décoration des pull requests
      run: |
        SERVICES="apiGateway email-service eurekaMs maintenance-service user-service logiciel-service agent-service equipement-service"
        for SERVICE in $SERVICES; do
          echo "Running SonarQube analysis for $SERVICE"
          cd $SERVICE
          # Utilisation de l'action SonarScanner pour Maven directement, mais en pointant vers votre SonarQube externe
          # Assurez-vous que votre serveur SonarQube est accessible depuis les runners GitHub Actions
          ./mvnw sonar:sonar \
            -Dsonar.projectKey=$SERVICE \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.organization=votre-organisation-sonarqube # Ajoutez ceci si vous utilisez SonarCloud ou une version récente de SonarQube avec des organisations
          cd ..
        done
    # --- Fin de la section modifiée pour SonarQube ---

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build & Push Docker Images
      run: |
        declare -A IMAGES=(
          [user-service]=$USER_SERVICE_IMAGE
          [maintenance-service]=$MAINTENANCE_SERVICE_IMAGE
          [eurekaMs]=$EUREKA_SERVICE_IMAGE
          [email-service]=$EMAIL_SERVICE_IMAGE
          [apiGateway]=$APIGATEWAY_SERVICE_IMAGE
          [ocr_service]=$OCR_SERVICE_IMAGE
          [logiciel-service]=$LOGICIEL_SERVICE_IMAGE
          [equipement-service]=$EQUIPEMENT_SERVICE_IMAGE
          [agent-service]=$AGENT_SERVICE_IMAGE
        )
        for SERVICE in "${!IMAGES[@]}"; do
          IMAGE=${IMAGES[$SERVICE]}
          echo "Building Docker image for $SERVICE -> $IMAGE"
          docker build -t $IMAGE $SERVICE
          docker push $IMAGE
        done

    - name: Deploy with Docker Compose
      run: |
        docker-compose down --volumes --remove-orphans || true
        docker-compose up -d --build
        docker-compose ps
