name: CI/CD Pipeline

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]

env:
  USER_SERVICE_IMAGE: hammoudihayfa/user-service:latest
  MAINTENANCE_SERVICE_IMAGE: hammoudihayfa/maintenance-service:latest
  EUREKA_SERVICE_IMAGE: hammoudihayfa/eureka-service:latest
  EMAIL_SERVICE_IMAGE: hammoudihayfa/email-service:latest
  # Corrected to lowercase: APIGATEWAY_SERVICE_IMAGE
  APIGATEWAY_SERVICE_IMAGE: hammoudihayfa/apigateway-service:latest
  OCR_SERVICE_IMAGE: hammoudihayfa/ocr_service:latest
  LOGICIEL_SERVICE_IMAGE: hammoudihayfa/logiciel-service:latest
  EQUIPEMENT_SERVICE_IMAGE: hammoudihayfa/equipement-service:latest
  AGENT_SERVICE_IMAGE: hammoudihayfa/agent-service:latest

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Build & Test Microservices
      run: |
        # Corrected 'eurekams' to 'eurekaMs' to match actual folder name casing
        SERVICES="user-service maintenance-service eurekaMs email-service apigateway ocr_service logiciel-service equipement-service agent-service"
        for SERVICE in $SERVICES; do
          echo "Building $SERVICE..."
          cd $SERVICE
          chmod +x mvnw
          ./mvnw clean install -DskipTests
          ./mvnw test
          cd ..
        done

    - name: Verify compiled binaries paths
      run: |
        echo "Listing contents of target/classes directories:"
        ls -R user-service/target/classes || echo "user-service/target/classes not found or empty"
        ls -R maintenance-service/target/classes || echo "maintenance-service/target/classes not found or empty"
        ls -R eurekaMs/target/classes || echo "eurekaMs/target/classes not found or empty"
        ls -R email-service/target/classes || echo "email-service/target/classes not found or empty"
        ls -R apiGateway/target/classes || echo "apiGateway/target/classes not found or empty"
        ls -R ocr_service/target/classes || echo "ocr_service/target/classes not found or empty"
        ls -R logiciel-service/target/classes || echo "logiciel-service/target/classes not found or empty"
        ls -R equipement-service/target/classes || echo "equipement-service/target/classes not found or empty"
        ls -R agent-service/target/classes || echo "agent-service/target/classes not found or empty"
        echo "End of target/classes verification."

    - name: SonarCloud Analysis
      uses: SonarSource/sonarqube-scan-action@v5.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey=hammoudihayfa_OACAback
          -Dsonar.organization=hammoudihayfa
          -Dsonar.java.binaries=ocr_service/target/classes,logiciel-service/target/classes,user-service/target/classes,maintenance-service/target/classes,apiGateway/target/classes,email-service/target/classes,equipement-service/target/classes,agent-service/target/classes,eurekaMs/target/classes
          -Dsonar.host.url=https://sonarcloud.io

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build & Push Docker Images
      run: |
        declare -A IMAGES=(
          [user-service]=$USER_SERVICE_IMAGE
          [maintenance-service]=$MAINTENANCE_SERVICE_IMAGE
          [eurekaMs]=$EUREKA_SERVICE_IMAGE
          [email-service]=$EMAIL_SERVICE_IMAGE
          [apigateway]=$APIGATEWAY_SERVICE_IMAGE
          [ocr_service]=$OCR_SERVICE_IMAGE
          [logiciel-service]=$LOGICIEL_SERVICE_IMAGE
          [equipement-service]=$EQUIPEMENT_SERVICE_IMAGE
          [agent-service]=$AGENT_SERVICE_IMAGE
        )
        for SERVICE_DIR in "${!IMAGES[@]}"; do
          IMAGE=${IMAGES[$SERVICE_DIR]}
          echo "Building Docker image for $SERVICE_DIR -> $IMAGE"
          docker build -t $IMAGE $SERVICE_DIR
          docker push $IMAGE
        done

    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose

    - name: Deploy with Docker Compose
      run: |
        docker-compose down --volumes --remove-orphans || true
        docker-compose up -d --build
        docker-compose ps
